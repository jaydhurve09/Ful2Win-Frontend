import React, { useState, useEffect, useMemo } from 'react';
import { useNavigate } from 'react-router-dom';
import { FaSearch, FaFire, FaStar, FaArrowRight, FaGamepad } from 'react-icons/fa';
import { motion, AnimatePresence } from 'framer-motion';
import axios from 'axios';
import Header from '../components/Header';
import Navbar from '../components/Navbar';
import BackgroundBubbles from '../components/BackgroundBubbles';

// Game categories
const GAME_CATEGORIES = [
  { id: 'all', name: 'All Games' },
  { id: 'arcade', name: 'Arcade' },
  { id: 'card', name: 'Card' },
  { id: 'puzzle', name: 'Puzzle' },
  { id: 'board', name: 'Board' },
  { id: 'action', name: 'Action' },
  { id: 'adventure', name: 'Adventure' },
];

const Games = () => {
  const navigate = useNavigate();
  const [activeCategory, setActiveCategory] = useState('all');
  const [searchQuery, setSearchQuery] = useState('');
  const [isScrolled, setIsScrolled] = useState(false);
  const [games, setGames] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // Handle scroll effect
  useEffect(() => {
    const handleScroll = () => {
      setIsScrolled(window.scrollY > 10);
    };
    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  // Fetch games from the backend
  useEffect(() => {
    const fetchGames = async () => {
      try {
        setLoading(true);
        setError(null);
        
        const response = await axios.get('http://localhost:5000/api/games', {
          timeout: 5000
        });
        
        if (response.data && Array.isArray(response.data.data)) {
          setGames(response.data.data);
        } else {
          throw new Error('Unexpected API response format');
        }
      } catch (err) {
        console.error('Error fetching games:', err);
        setError('Failed to load games. Please try again later.');
        setGames([]);
      } finally {
        setLoading(false);
      }
    };
    
    fetchGames();
  }, []);

  // Filter and sort games
  const { filteredGames, featuredGames } = useMemo(() => {
    if (!Array.isArray(games)) return { filteredGames: [], featuredGames: [] };
    
    const filtered = games.filter((game) => {
      if (!game) return false;
      
      const categoryMatch = activeCategory === 'all' || 
                         (game.type && game.type.toLowerCase() === activeCategory.toLowerCase());
      
      const searchMatch = !searchQuery || 
                        (game.name && game.name.toLowerCase().includes(searchQuery.toLowerCase())) ||
                        (game.displayName && game.displayName.toLowerCase().includes(searchQuery.toLowerCase()));
      
      return categoryMatch && searchMatch;
    });

    const featured = games
      .filter(game => game && game.status?.isFeatured)
      .slice(0, 5);

    return { filteredGames: filtered, featuredGames: featured };
  }, [games, activeCategory, searchQuery]);

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-900 to-gray-800 text-white flex flex-col items-center justify-center">
        <div className="animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-purple-500"></div>
        <p className="mt-4 text-lg">Loading games...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-900 to-gray-800 text-white flex flex-col items-center justify-center p-4">
        <div className="bg-red-500/20 border border-red-500/50 rounded-lg p-6 max-w-md w-full text-center">
          <h2 className="text-2xl font-bold mb-2">Error Loading Games</h2>
          <p className="text-red-200 mb-4">{error}</p>
          <button 
            onClick={() => window.location.reload()} 
            className="bg-white/10 hover:bg-white/20 px-4 py-2 rounded-lg transition-colors"
          >
            Retry
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 to-gray-800 text-white flex flex-col">
      <BackgroundBubbles />
      
      <div className="sticky top-0 z-30">
        <Header />
        <Navbar />
      </div>

      {/* Search and Categories */}
      <div className={`sticky top-16 sm:top-16 z-20 bg-gray-900/80 backdrop-blur-sm transition-all duration-300 ${isScrolled ? 'py-2 shadow-lg' : 'py-3'}`}>
        <div className="container mx-auto px-4">
          <div className="flex flex-col sm:flex-row gap-3">
            {/* Search Bar */}
            <div className="relative flex-1">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <FaSearch className="text-gray-400" />
              </div>
              <input
                type="text"
                placeholder="Search games..."
                className="w-full pl-10 pr-4 py-2 bg-gray-800/70 border border-gray-700 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent text-white placeholder-gray-400"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
              />
            </div>
            
            {/* Category Filter - Desktop */}
            <div className="hidden sm:flex overflow-x-auto scrollbar-hide space-x-2">
              {GAME_CATEGORIES.map((category) => (
                <button
                  key={category.id}
                  onClick={() => setActiveCategory(category.id)}
                  className={`px-3 py-2 text-sm font-medium whitespace-nowrap rounded-lg transition-colors ${
                    activeCategory === category.id
                      ? 'bg-purple-600 text-white'
                      : 'bg-gray-800/70 text-gray-300 hover:bg-gray-700/70'
                  }`}
                >
                  {category.name}
                </button>
              ))}
            </div>
          </div>
          
          {/* Category Filter - Mobile */}
          <div className="sm:hidden mt-2 overflow-x-auto scrollbar-hide">
            <div className="flex space-x-2 pb-1">
              {GAME_CATEGORIES.map((category) => (
                <button
                  key={category.id}
                  onClick={() => setActiveCategory(category.id)}
                  className={`px-3 py-1.5 text-xs font-medium whitespace-nowrap rounded-lg transition-colors ${
                    activeCategory === category.id
                      ? 'bg-purple-600 text-white'
                      : 'bg-gray-800/70 text-gray-300 hover:bg-gray-700/70'
                  }`}
                >
                  {category.name}
                </button>
              ))}
            </div>
          </div>
        </div>
      </div>

      <main className="flex-1 container mx-auto px-4 py-6 relative z-10">
        {/* Hero Section */}
        <div className="mb-8 text-center">
          <h1 className="text-3xl sm:text-4xl md:text-5xl font-bold mb-4 bg-gradient-to-r from-purple-400 via-pink-400 to-blue-400 bg-clip-text text-transparent">
            Play & Win Amazing Rewards
          </h1>
          <p className="text-gray-300 text-sm sm:text-base max-w-2xl mx-auto">
            Discover and compete in our exciting collection of games. Win rewards, challenge friends, and climb the leaderboards!
          </p>
        </div>

        {/* Featured Games */}
        <section className="mb-12">
          <div className="flex justify-between items-center mb-6">
            <h2 className="text-2xl font-bold flex items-center">
              <FaFire className="text-orange-500 mr-2" />
              Featured Games
            </h2>
            {featuredGames.length > 0 && (
              <button 
                onClick={() => setActiveCategory('all')}
                className="text-sm text-purple-300 hover:text-white flex items-center group"
              >
                View All
                <FaArrowRight className="ml-1 text-xs group-hover:translate-x-1 transition-transform" />
              </button>
            )}
          </div>

          {featuredGames.length > 0 ? (
            <div className="relative">
              <div className="flex overflow-x-auto pb-4 -mx-2 px-2 scrollbar-hide">
                <div className="flex space-x-4">
                  <AnimatePresence>
                    {featuredGames.map((game) => (
                      <motion.div
                        key={game._id}
                        initial={{ opacity: 0, x: 20 }}
                        animate={{ opacity: 1, x: 0 }}
                        whileHover={{ y: -5 }}
                        transition={{ duration: 0.3 }}
                        className="flex-shrink-0 w-64 bg-gray-800/50 rounded-xl overflow-hidden border border-gray-700/50 hover:border-purple-500/50 cursor-pointer"
                        onClick={() => navigate(`/game/${game.name || game._id}`)}
                      >
                        <div className="aspect-video bg-gray-900 relative">
                          <img
                            src={game.assets?.thumbnail || 'https://via.placeholder.com/400x225/1a1a2e/ffffff?text=Game+Image'}
                            alt={game.displayName || game.name}
                            className="w-full h-full object-cover"
                            onError={(e) => {
                              e.target.onerror = null;
                              e.target.src = 'https://via.placeholder.com/400x225/1a1a2e/ffffff?text=Game+Image';
                            }}
                          />
                          <div className="absolute inset-0 bg-gradient-to-t from-black/70 to-transparent opacity-0 hover:opacity-100 transition-opacity flex items-end p-4">
                            <button className="w-full bg-purple-600 hover:bg-purple-700 text-white py-2 px-4 rounded-lg font-medium transition-colors">
                              Play Now
                            </button>
                          </div>
                        </div>
                        <div className="p-4">
                          <h3 className="font-bold text-white mb-1 truncate">
                            {game.displayName || game.name}
                          </h3>
                          <div className="flex justify-between items-center">
                            <span className="text-xs text-gray-400 capitalize">
                              {game.type?.toLowerCase() || 'Game'}
                            </span>
                            <div className="flex items-center">
                              <FaStar className="text-yellow-400 text-sm mr-1" />
                              <span className="text-xs text-gray-300">
                                {game.rating?.toFixed(1) || 'N/A'}
                              </span>
                            </div>
                          </div>
                        </div>
                      </motion.div>
                    ))}
                  </AnimatePresence>
                </div>
              </div>
            </div>
          ) : (
            <div className="text-center py-12 bg-gray-800/30 rounded-xl">
              <div className="w-16 h-16 mx-auto mb-4 rounded-full bg-gray-700/50 flex items-center justify-center">
                <FaGamepad className="text-2xl text-gray-500" />
              </div>
              <h3 className="text-lg font-medium text-gray-200 mb-1">
                No featured games available
              </h3>
              <p className="text-gray-400 text-sm">
                Check back later for featured games
              </p>
            </div>
          )}
        </section>

        {/* All Games */}
        <section>
          <div className="flex justify-between items-center mb-6">
            <h2 className="text-2xl font-bold">
              {activeCategory === 'all' ? 'All Games' : `${activeCategory} Games`}
              {searchQuery && (
                <span className="text-purple-300 font-normal ml-2 text-base">"{searchQuery}"</span>
              )}
            </h2>
            <div className="bg-gray-800/70 rounded-lg px-3 py-1.5 text-sm">
              {filteredGames.length} {filteredGames.length === 1 ? 'game' : 'games'} found
            </div>
          </div>

          {filteredGames.length > 0 ? (
            <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4">
              <AnimatePresence>
                {filteredGames.map((game) => (
                  <motion.div
                    key={game._id}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    whileHover={{ scale: 1.03 }}
                    whileTap={{ scale: 0.98 }}
                    transition={{ duration: 0.2 }}
                    className="bg-gray-800/50 backdrop-blur-sm rounded-xl overflow-hidden border border-gray-700/50 hover:border-purple-500/50 transition-all cursor-pointer"
                    onClick={() => navigate(`/game/${game.name || game._id}`)}
                  >
                    <div className="aspect-video bg-gray-800 relative">
                      <img
                        src={game.assets?.thumbnail || 'https://via.placeholder.com/400x225/1a1a2e/ffffff?text=Game+Image'}
                        alt={game.displayName || game.name}
                        className="w-full h-full object-cover"
                        onError={(e) => {
                          e.target.onerror = null;
                          e.target.src = 'https://via.placeholder.com/400x225/1a1a2e/ffffff?text=Game+Image';
                        }}
                      />
                      {game.status?.isFeatured && (
                        <div className="absolute top-2 left-2 bg-yellow-500 text-yellow-900 text-xs font-bold px-2 py-1 rounded">
                          Featured
                        </div>
                      )}
                    </div>
                    <div className="p-4">
                      <h3 className="font-bold text-white mb-1 truncate">
                        {game.displayName || game.name}
                      </h3>
                      <div className="flex justify-between items-center">
                        <span className="text-xs text-gray-400 capitalize">
                          {game.type?.toLowerCase() || 'Game'}
                        </span>
                        <div className="flex items-center">
                          <FaStar className="text-yellow-400 text-xs mr-1" />
                          <span className="text-xs text-gray-300">
                            {game.rating?.toFixed(1) || 'N/A'}
                          </span>
                        </div>
                      </div>
                    </div>
                  </motion.div>
                ))}
              </AnimatePresence>
            </div>
          ) : (
            <div className="text-center py-16 bg-gray-800/30 rounded-xl">
              <div className="w-16 h-16 mx-auto mb-4 rounded-full bg-gray-700/50 flex items-center justify-center">
                <FaGamepad className="text-2xl text-gray-500" />
              </div>
              <h3 className="text-lg font-medium text-gray-200 mb-1">
                {searchQuery
                  ? `No games match "${searchQuery}"`
                  : activeCategory !== 'all'
                    ? `No ${activeCategory} games available`
                    : 'No games found'}
              </h3>
              <p className="text-gray-400 text-sm">
                {searchQuery || activeCategory !== 'all'
                  ? 'Try a different search term or category'
                  : 'Check back later for new games'}
              </p>
            </div>
          )}
        </section>
      </main>
    </div>
  );
};

export default Games;
